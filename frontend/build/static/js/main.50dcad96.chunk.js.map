{
  "version": 3,
  "sources": [
    "components/LoadingIndicator.tsx",
    "components/SocialMedias.tsx",
    "redux/actions/types.ts",
    "constants/style.ts",
    "api/index.ts",
    "containers/Home.tsx",
    "constants/routes.ts",
    "redux/actions/Profile.ts",
    "containers/Profile.tsx",
    "containers/Experience.tsx",
    "redux/actions/Experience.ts",
    "containers/Project.tsx",
    "redux/actions/Project.ts",
    "containers/Achievement.tsx",
    "redux/actions/Achievement.ts",
    "containers/Skill.tsx",
    "redux/actions/Skill.ts",
    "constants/scrollLinks.ts",
    "components/Navbar.tsx",
    "components/MobileNavbar.tsx",
    "containers/index.tsx",
    "redux/reducers/Experience.ts",
    "redux/reducers/Project.ts",
    "redux/reducers/Achievement.ts",
    "redux/reducers/Skill.ts",
    "redux/reducers/Profile.ts",
    "redux/reducers/index.ts",
    "redux/index.ts",
    "index.tsx"
  ],
  "names": [
    "LoadingIndicator",
    "Container",
    "name",
    "color",
    "React",
    "Component",
    "styled",
    "div",
    "ExperienceActionTypes",
    "ProjectActionTypes",
    "AchievementActionTypes",
    "SkillActionTypes",
    "ProfileActionTypes",
    "SocialMediaData",
    "link",
    "icon",
    "SocialMedias",
    "SocialMedia",
    "Object",
    "values",
    "map",
    "data",
    "key",
    "href",
    "rel",
    "target",
    "className",
    "http",
    "axios",
    "create",
    "baseURL",
    "getExperiences",
    "a",
    "get",
    "response",
    "getProjects",
    "getAchievements",
    "getSkills",
    "getProfile",
    "Home",
    "this",
    "props",
    "profile",
    "loaded",
    "fetchProfile",
    "loading",
    "StyledElement",
    "cursorClassName",
    "loop",
    "Delay",
    "ms",
    "Backspace",
    "count",
    "length",
    "message",
    "connect",
    "dispatch",
    "type",
    "LOADING_PROFILE",
    "api",
    "payload",
    "SET_PROFILE",
    "Element",
    "Profile",
    "Flex",
    "Image",
    "src",
    "imageUrl",
    "alt",
    "Detail",
    "descriptions",
    "description",
    "id",
    "content",
    "GET_PROFILE",
    "Experience",
    "experiences",
    "fetchExperiences",
    "educations",
    "works",
    "education",
    "Timeline",
    "place",
    "time",
    "institution",
    "role",
    "institutionUrl",
    "grade",
    "work",
    "company",
    "companyUrl",
    "LOADING_EXPERIENCES",
    "SET_EXPERIENCES",
    "ul",
    "Project",
    "projects",
    "fetchProjects",
    "project",
    "title",
    "imageUrls",
    "image",
    "url",
    "techStack",
    "LOADING_PROJECTS",
    "SET_PROJECTS",
    "Achievement",
    "achievements",
    "fetchAchievements",
    "achievement",
    "organizer",
    "LOADING_ACHIEVEMENTS",
    "SET_ACHIEVEMENTS",
    "Skill",
    "state",
    "collapsed",
    "skills",
    "fetchSkills",
    "setTimeout",
    "setState",
    "Skills",
    "skill",
    "style",
    "width",
    "level",
    "LOADING_SKILLS",
    "SET_SKILLS",
    "links",
    "to",
    "text",
    "NavigationBar",
    "show",
    "scrollPos",
    "handleScroll",
    "bind",
    "document",
    "body",
    "getBoundingClientRect",
    "top",
    "window",
    "addEventListener",
    "removeEventListener",
    "Transition",
    "StyledNavbar",
    "Links",
    "spy",
    "smooth",
    "duration",
    "MobileNavbar",
    "open",
    "onClick",
    "toggleHamburger",
    "Routes",
    "INITIAL_STATE",
    "email",
    "reducers",
    "combineReducers",
    "action",
    "store",
    "createStore",
    "applyMiddleware",
    "thunk",
    "ReactDOM",
    "render",
    "querySelector"
  ],
  "mappings": "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",
  "file": "static/js/main.50dcad96.chunk.js",
  "sourcesContent": [
    "import React from \"react\";\nimport Spinner from \"react-spinkit\";\nimport styled from \"styled-components\";\n\nclass LoadingIndicator extends React.Component {\n  render() {\n    return (\n      <Container>\n        <Spinner name=\"ball-scale-ripple-multiple\" color=\"steelblue\" />\n      </Container>\n    );\n  }\n}\n\nexport default LoadingIndicator;\n\nconst Container = styled.div`\n  z-index: 100;\n  position: relative;\n  margin: auto;\n  height: 10vh;\n`;\n",
    "import React from \"react\";\nimport styled from \"styled-components\";\nimport { SECONDARY_COLOR, FONT_COLOR } from \"../constants/style\";\n\nconst GITHUB: string = \"https://github.com/Andrewfang21/\";\nconst FACEBOOK: string = \"https://www.facebook.com/Andrewfanggara21/\";\nconst INSTAGRAM: string = \"https://www.instagram.com/andrew_fanggara/\";\nconst LINKEDIN: string = \"https://www.linkedin.com/in/andrewfang21/\";\nconst EMAIL: string = \"mailto:Andrewfanggara21@gmail.com\";\n\ninterface SocialMediaModel {\n  link: string;\n  icon: string;\n}\n\nconst SocialMediaData: SocialMediaModel[] = [\n  { link: LINKEDIN, icon: \"fa fa-linkedin fa-2x\" },\n  { link: GITHUB, icon: \"fa fa-github fa-2x\" },\n  { link: FACEBOOK, icon: \"fa fa-facebook fa-2x\" },\n  { link: INSTAGRAM, icon: \"fa fa-instagram fa-2x\" },\n  { link: EMAIL, icon: \"fa fa-envelope fa-2x\" },\n];\n\nclass SocialMedias extends React.Component {\n  render() {\n    return (\n      <SocialMedia>\n        {Object.values(SocialMediaData).map((data: SocialMediaModel) => (\n          <span key={data.icon}>\n            <a href={data.link} rel=\"noopener noreferrer\" target=\"_blank\">\n              <i className={data.icon} />\n            </a>\n          </span>\n        ))}\n      </SocialMedia>\n    );\n  }\n}\n\nexport default SocialMedias;\n\nconst SocialMedia = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-content: center;\n\n  a {\n    margin: 5px;\n    color: ${FONT_COLOR};\n\n    :hover {\n      color: ${SECONDARY_COLOR};\n    }\n  }\n`;\n",
    "import { LoadingExperiences, SetExperiences } from \"./Experience\";\nimport { LoadingProjects, SetProjects } from \"./Project\";\nimport { LoadingAchievements, SetAchievements } from \"./Achievement\";\nimport { LoadingSkills, SetSkills } from \"./Skill\";\nimport { LoadingProfile, SetProfile, GetProfile } from \"./Profile\";\n\nexport enum ExperienceActionTypes {\n  SET_EXPERIENCES = \"SET_EXPERIENCES\",\n  LOADING_EXPERIENCES = \"LOADING_EXPERIENCES\",\n}\n\nexport type ExperienceAction = LoadingExperiences | SetExperiences;\n\nexport enum ProjectActionTypes {\n  SET_PROJECTS = \"SET_PROJECTS\",\n  LOADING_PROJECTS = \"LOADING_PROJECTS\",\n}\n\nexport type ProjectAction = LoadingProjects | SetProjects;\n\nexport enum AchievementActionTypes {\n  SET_ACHIEVEMENTS = \"SET_ACHIEVEMENTS\",\n  LOADING_ACHIEVEMENTS = \"LOADING_ACHIEVEMENTS\",\n}\n\nexport type AchievementAction = LoadingAchievements | SetAchievements;\n\nexport enum SkillActionTypes {\n  SET_SKILLS = \"SET_SKILLS\",\n  LOADING_SKILLS = \"LOADING_SKILLS\",\n}\n\nexport type SkillAction = LoadingSkills | SetSkills;\n\nexport enum ProfileActionTypes {\n  SET_PROFILE = \"SET_PROFILE\",\n  LOADING_PROFILE = \"LOADING_PROFILE\",\n  GET_PROFILE = \"GET_PROFILE\",\n}\n\nexport type ProfileAction = LoadingProfile | SetProfile | GetProfile;\n",
    "export const PRIMARY_COLOR: string = \"#2C3E50\";\nexport const SECONDARY_COLOR: string = \"#45A9C4\";\nexport const FONT_COLOR: string = \"#D6D5EC\";\n",
    "import axios from \"axios\";\n\nimport AchievementModel from \"../models/Achievement\";\nimport ExperienceModel from \"../models/Experience\";\nimport ProfileModel from \"../models/Profile\";\nimport ProjectModel from \"../models/Project\";\nimport SkillModel from \"../models/Skill\";\n\nconst http = axios.create({\n  // baseURL: \"http://localhost:8080\",\n  baseURL: \"https://andrewfang-api.herokuapp.com/\",\n});\n\nexport async function getExperiences(): Promise<ExperienceModel> {\n  const response = await http.get(\"/experience\");\n  return response.data;\n}\n\nexport async function getProjects(): Promise<ProjectModel[]> {\n  const response = await http.get(\"/project\");\n  return response.data;\n}\n\nexport async function getAchievements(): Promise<AchievementModel[]> {\n  const response = await http.get(\"/achievement\");\n  return response.data;\n}\n\nexport async function getSkills(): Promise<SkillModel[]> {\n  const response = await http.get(\"/skill\");\n  return response.data;\n}\n\nexport async function getProfile(): Promise<ProfileModel> {\n  const response = await http.get(\"/profile\");\n  return response.data;\n}\n",
    "import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Element } from \"react-scroll\";\nimport Typing from \"react-typing-animation\";\nimport styled from \"styled-components\";\n\nimport LoadingIndicator from \"../components/LoadingIndicator\";\nimport SocialMedias from \"../components/SocialMedias\";\nimport ProfileModel from \"../models/Profile\";\n\nimport { PRIMARY_COLOR, FONT_COLOR } from \"../constants/style\";\nimport { HOME_ROUTE } from \"../constants/routes\";\nimport { ProfileActionModel } from \"../redux/reducers/Profile\";\nimport { StoreState } from \"../redux/reducers\";\nimport { fetchProfile } from \"../redux/actions/Profile\";\n\ninterface ProfileProps {\n  profile: ProfileActionModel;\n  fetchProfile: Function;\n}\n\nclass Home extends React.Component<ProfileProps> {\n  componentDidMount(): void {\n    if (!this.props.profile.loaded) {\n      this.props.fetchProfile();\n    }\n  }\n\n  render() {\n    const {\n      profile,\n      loading,\n    }: { profile: ProfileModel; loading: boolean } = this.props.profile;\n\n    return (\n      <StyledElement name={HOME_ROUTE}>\n        {loading && <LoadingIndicator />}\n        {!loading && (\n          <Container>\n            <Typing cursorClassName=\"cursor\" loop>\n              <Typing.Delay ms={1000} />\n              <span className=\"name\">{profile.name}</span>\n              <Typing.Delay ms={1000} />\n              <Typing.Backspace count={profile.name.length} />\n            </Typing>\n            <div className=\"description\">{profile.message}</div>\n            <SocialMedias />\n          </Container>\n        )}\n      </StyledElement>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  profile,\n}: StoreState): { profile: ProfileActionModel } => {\n  return { profile };\n};\n\nexport default connect(mapStateToProps, { fetchProfile })(Home);\n\nconst StyledElement = styled(Element)`\n  height: 100vh;\n  width: 100%;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  background-color: ${PRIMARY_COLOR};\n  color: ${FONT_COLOR};\n`;\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 85%;\n  margin: auto;\n\n  .name {\n    font-weight: bold;\n    font-size: 50px;\n    margin-bottom: 10px;\n    text-align: center;\n  }\n\n  .description {\n    font-size: 20px;\n    margin-bottom: 10px;\n    text-align: center;\n  }\n\n  .cursor {\n    color: ${FONT_COLOR};\n  }\n`;\n",
    "export const HOME_ROUTE = \"/\";\nexport const PROFILE_ROUTE = \"/profile\";\nexport const EXPERIENCE_ROUTE = \"/experiences\";\nexport const PROJECT_ROUTE = \"/projects\";\nexport const ACHIEVEMENT_ROUTE = \"/achievements\";\nexport const SKILL_ROUTE = \"/skills\";\n",
    "import { Dispatch } from \"redux\";\n\nimport ProfileModel from \"../../models/Profile\";\n\nimport { ProfileActionTypes } from \"../actions/types\";\nimport * as api from \"../../api\";\n\n// Models ------------------------------------------------------------\nexport interface LoadingProfile {\n  type: ProfileActionTypes.LOADING_PROFILE;\n}\n\nexport interface SetProfile {\n  type: ProfileActionTypes.SET_PROFILE;\n  payload: ProfileModel;\n}\n\nexport interface GetProfile {\n  type: ProfileActionTypes.GET_PROFILE;\n}\n\n// Actions ------------------------------------------------------------\nexport const loadingProfile = (): LoadingProfile => ({\n  type: ProfileActionTypes.LOADING_PROFILE,\n});\n\nexport const setProfile = (payload: ProfileModel): SetProfile => ({\n  type: ProfileActionTypes.SET_PROFILE,\n  payload: payload,\n});\n\nexport const getProfile = (): GetProfile => ({\n  type: ProfileActionTypes.GET_PROFILE,\n});\n\nexport const fetchProfile = () => async (dispatch: Dispatch) => {\n  dispatch<LoadingProfile>(loadingProfile());\n  const profile: ProfileModel = await api.getProfile();\n  dispatch<SetProfile>(setProfile(profile));\n};\n",
    "import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Element } from \"react-scroll\";\nimport styled from \"styled-components\";\n\nimport LoadingIndicator from \"../components/LoadingIndicator\";\nimport ProfileModel from \"../models/Profile\";\n\nimport { PROFILE_ROUTE } from \"../constants/routes\";\nimport { PRIMARY_COLOR, FONT_COLOR } from \"../constants/style\";\nimport { getProfile } from \"../redux/actions/Profile\";\nimport { StoreState } from \"../redux/reducers\";\nimport { ProfileActionModel } from \"../redux/reducers/Profile\";\nimport Description from \"../models/Description\";\n\ninterface ProfileProps {\n  profile: ProfileActionModel;\n  getProfile: Function;\n}\n\nclass Profile extends React.Component<ProfileProps> {\n  componentDidMount(): void {\n    if (this.props.profile.loaded) {\n      this.props.getProfile();\n    }\n  }\n\n  render() {\n    const {\n      profile,\n      loading,\n    }: { profile: ProfileModel; loading: boolean } = this.props.profile;\n\n    return (\n      <StyledElement name={PROFILE_ROUTE}>\n        <Container>\n          {loading && (\n            <div className=\"loading\">\n              <LoadingIndicator />\n            </div>\n          )}\n          {!loading && (\n            <Flex>\n              <Image>\n                <img\n                  className=\"image\"\n                  src={profile.imageUrl}\n                  alt={profile.name}\n                />\n              </Image>\n              <Detail>\n                <div className=\"title\">About Me</div>\n                {Object.values(profile.descriptions).map(\n                  (description: Description) => (\n                    <div key={description} className=\"description\">\n                      {description}\n                    </div>\n                  )\n                )}\n              </Detail>\n            </Flex>\n          )}\n        </Container>\n      </StyledElement>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  profile,\n}: StoreState): { profile: ProfileActionModel } => {\n  return { profile };\n};\n\nexport default connect(mapStateToProps, { getProfile })(Profile);\n\nconst StyledElement = styled(Element)`\n  width: 100%;\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: ${PRIMARY_COLOR};\n  color: ${FONT_COLOR};\n`;\n\nconst Container = styled.div`\n  width: 85%;\n\n  .loading {\n    margin-top: 10vh;\n    margin-left: 42vw;\n  }\n`;\n\nconst Detail = styled.div`\n  width: 100%;\n\n  .title {\n    padding: 50px 0px 20px 0px;\n    font-weight: bold;\n    font-size: 40px;\n\n    @media screen and (max-width: 900px) {\n      text-align: center;\n      padding-top: 0px;\n    }\n  }\n\n  .description {\n    padding-left: 20px;\n    margin-bottom: 30px;\n    text-align: justify;\n    color: ${FONT_COLOR};\n\n    @media screen and (max-width: 900px) {\n      padding-left: 0px;\n    }\n  }\n`;\n\nconst Image = styled.div`\n  .image {\n    position: relative;\n    display: block;\n    margin: 50px 50px 50px 0px;\n    width: 150px;\n    height: 150px;\n    border-radius: 50%;\n\n    @media screen and (max-width: 900px) {\n      margin-left: auto;\n      margin-right: auto;\n      margin-bottom: 30px;\n      display: block;\n    }\n  }\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  @media screen and (max-width: 900px) {\n    flex-direction: column;\n  }\n`;\n",
    "import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Element } from \"react-scroll\";\nimport styled from \"styled-components\";\n\nimport LoadingIndicator from \"../components/LoadingIndicator\";\nimport Description from \"../models/Description\";\n\nimport { EXPERIENCE_ROUTE } from \"../constants/routes\";\nimport { PRIMARY_COLOR, SECONDARY_COLOR, FONT_COLOR } from \"../constants/style\";\nimport { EducationModel, WorkModel } from \"../models/Experience\";\nimport { fetchExperiences } from \"../redux/actions/Experience\";\nimport { StoreState } from \"../redux/reducers\";\nimport { ExperienceActionModel } from \"../redux/reducers/Experience\";\n\ninterface ExperienceProps {\n  experiences: ExperienceActionModel;\n  fetchExperiences: Function;\n}\n\nclass Experience extends React.Component<ExperienceProps> {\n  componentDidMount(): void {\n    if (!this.props.experiences.loaded) {\n      this.props.fetchExperiences();\n    }\n  }\n\n  render() {\n    const {\n      educations,\n      works,\n      loading,\n    }: {\n      educations: EducationModel[];\n      works: WorkModel[];\n      loading: boolean;\n    } = this.props.experiences;\n\n    return (\n      <StyledElement name={EXPERIENCE_ROUTE}>\n        <Container>\n          <Flex>\n            <div className=\"header\">Educations</div>\n            {loading && (\n              <div className=\"loading\">\n                <LoadingIndicator />\n              </div>\n            )}\n            {!loading && (\n              <div>\n                {Object.values(educations).map((education: EducationModel) => (\n                  <Timeline key={education.id}>\n                    <div className=\"time-and-place\">\n                      <div className=\"place\">{education.place}</div>\n                      <div className=\"time\">{education.time}</div>\n                    </div>\n                    <div className=\"image\">\n                      <img\n                        src={education.imageUrl}\n                        alt={education.institution}\n                      />\n                    </div>\n                    <div className=\"panel\">\n                      <div className=\"role\">{education.role}</div>\n                      <div className=\"institution\">\n                        <a\n                          href={education.institutionUrl}\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          {education.institution}\n                        </a>\n                      </div>\n                      <div className=\"grade\">{education.grade}</div>\n                      <ul>\n                        {Object.values(education.descriptions).map(\n                          (description: Description) => (\n                            <li key={description} className=\"description\">\n                              {description}\n                            </li>\n                          )\n                        )}\n                      </ul>\n                    </div>\n                  </Timeline>\n                ))}\n              </div>\n            )}\n            <div className=\"header\">Work and Voluntary Experiences</div>\n            {loading && (\n              <div className=\"loading\">\n                <LoadingIndicator />\n              </div>\n            )}\n            {!loading && (\n              <div>\n                {Object.values(works).map((work: WorkModel) => (\n                  <Timeline key={work.id}>\n                    <div className=\"time-and-place\">\n                      <div className=\"place\">{work.place}</div>\n                      <div className=\"time\">{work.time}</div>\n                    </div>\n                    <div className=\"image\">\n                      <img src={work.imageUrl} alt={work.company} />\n                    </div>\n                    <div className=\"panel\">\n                      <div className=\"role\">{work.role}</div>\n                      <div className=\"institution\">\n                        <a\n                          href={work.companyUrl}\n                          rel=\"noopener noreferrer\"\n                          target=\"_blank\"\n                        >\n                          {work.company}\n                        </a>\n                      </div>\n                      <ul>\n                        {Object.values(work.descriptions).map(\n                          (description: Description) => (\n                            <li key={description} className=\"description\">\n                              {description}\n                            </li>\n                          )\n                        )}\n                      </ul>\n                    </div>\n                  </Timeline>\n                ))}\n              </div>\n            )}\n          </Flex>\n        </Container>\n      </StyledElement>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  experiences,\n}: StoreState): { experiences: ExperienceActionModel } => {\n  return { experiences };\n};\n\nexport default connect(mapStateToProps, { fetchExperiences })(Experience);\n\nconst StyledElement = styled(Element)`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: ${PRIMARY_COLOR};\n  color: ${FONT_COLOR};\n`;\n\nconst Container = styled.div`\n  width: 85%;\n\n  .loading {\n    margin-top: 10vh;\n    margin-left: 42vw;\n  }\n`;\n\nconst Flex = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  .header {\n    margin-top: 30px;\n    margin-bottom: 30px;\n    font-size: 40px;\n    font-weight: bold;\n  }\n`;\n\nconst Timeline = styled.ul`\n  display: flex;\n\n  .time-and-place {\n    display: flex;\n    width: 15%;\n    text-align: left;\n    flex-direction: column;\n\n    @media screen and (max-width: 900px) {\n      width: 100%;\n      flex-direction: row;\n      justify-content: space-between;\n      padding-bottom: 10px;\n\n      .time {\n        text-align: right;\n      }\n    }\n  }\n\n  .role,\n  .institution {\n    font-weight: bold;\n    font-size: 20px;\n    margin-bottom: 5px;\n\n    a {\n      color: ${SECONDARY_COLOR};\n    }\n\n    @media screen and (max-width: 900px) {\n      margin-top: 10px;\n      text-align: center;\n    }\n  }\n\n  .image {\n    width: 15%;\n\n    img {\n      height: 80px;\n      margin-left: auto;\n      margin-right: auto;\n      display: block;\n    }\n\n    @media screen and (max-width: 900px) {\n      width: 100%;\n      height: 70px;\n\n      img {\n        height: 70px;\n      }\n    }\n  }\n\n  .panel {\n    flex: 1;\n    ul {\n      padding-left: 10px;\n    }\n  }\n\n  .description {\n    margin-bottom: 5px;\n    text-align: justify;\n  }\n\n  .grade {\n    font-size: 15px;\n    font-weight: bold;\n    margin-bottom: 5px;\n    margin-left: 10px;\n  }\n\n  @media screen and (max-width: 900px) {\n    margin: 0;\n    padding: 0;\n    flex-direction: column;\n  }\n`;\n",
    "import { Dispatch } from \"redux\";\n\nimport ExperienceModel from \"../../models/Experience\";\n\nimport { ExperienceActionTypes } from \"../actions/types\";\nimport * as api from \"../../api\";\n\n// Models ------------------------------------------------------------\nexport interface LoadingExperiences {\n  type: ExperienceActionTypes.LOADING_EXPERIENCES;\n}\n\nexport interface SetExperiences {\n  type: ExperienceActionTypes.SET_EXPERIENCES;\n  payload: ExperienceModel;\n}\n\n// Actions ------------------------------------------------------------\nexport const loadingExperiences = (): LoadingExperiences => ({\n  type: ExperienceActionTypes.LOADING_EXPERIENCES,\n});\n\nexport const setExperiences = (payload: ExperienceModel): SetExperiences => ({\n  type: ExperienceActionTypes.SET_EXPERIENCES,\n  payload: payload,\n});\n\nexport const fetchExperiences = () => async (dispatch: Dispatch) => {\n  dispatch<LoadingExperiences>(loadingExperiences());\n  const experiences: ExperienceModel = await api.getExperiences();\n  dispatch<SetExperiences>(setExperiences(experiences));\n};\n",
    "import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Element } from \"react-scroll\";\nimport styled from \"styled-components\";\n\nimport LoadingIndicator from \"../components/LoadingIndicator\";\n\nimport { PROJECT_ROUTE } from \"../constants/routes\";\nimport { PRIMARY_COLOR, SECONDARY_COLOR, FONT_COLOR } from \"../constants/style\";\nimport Description from \"../models/Description\";\nimport ProjectModel, { ImageModel } from \"../models/Project\";\nimport { fetchProjects } from \"../redux/actions/Project\";\nimport { StoreState } from \"../redux/reducers\";\nimport { ProjectActionModel } from \"../redux/reducers/Project\";\n\ninterface ProjectProps {\n  projects: ProjectActionModel;\n  fetchProjects: Function;\n}\n\nclass Project extends React.Component<ProjectProps> {\n  componentDidMount(): void {\n    if (!this.props.projects.loaded) {\n      this.props.fetchProjects();\n    }\n  }\n\n  render() {\n    const {\n      projects,\n      loading,\n    }: { projects: ProjectModel[]; loading: boolean } = this.props.projects;\n\n    return (\n      <StyledElement name={PROJECT_ROUTE}>\n        <Container>\n          <div className=\"header\">Projects</div>\n          {loading && (\n            <div className=\"loading\">\n              <LoadingIndicator />\n            </div>\n          )}\n          {!loading && (\n            <div>\n              {Object.values(projects).map((project: ProjectModel) => (\n                <Detail key={project.id}>\n                  <div className=\"title\">\n                    {project.title}\n                    <span className=\"github\">\n                      <a\n                        href={project.link}\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                      >\n                        <i className=\"fa fa-github\"></i>\n                      </a>\n                    </span>\n                  </div>\n                  <div className=\"image\">\n                    {Object.values(project.imageUrls).map(\n                      (image: ImageModel) => (\n                        <img\n                          key={image.id}\n                          src={image.url}\n                          alt=\"{project.title}-1\"\n                        />\n                      )\n                    )}\n                  </div>\n                  <ul className=\"descriptions\">\n                    {Object.values(project.descriptions).map(\n                      (description: Description) => (\n                        <li key={description}>{description}</li>\n                      )\n                    )}\n                    <li className=\"tech-stack\">\n                      <span>Tech Stacks: {project.techStack}</span>\n                    </li>\n                  </ul>\n                </Detail>\n              ))}\n            </div>\n          )}\n        </Container>\n      </StyledElement>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  projects,\n}: StoreState): { projects: ProjectActionModel } => {\n  return { projects };\n};\n\nexport default connect(mapStateToProps, { fetchProjects })(Project);\n\nconst StyledElement = styled(Element)`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: ${PRIMARY_COLOR};\n  color: ${FONT_COLOR};\n`;\n\nconst Container = styled.div`\n  width: 85%;\n\n  .header {\n    margin: 3vh 0;\n    width: 85%;\n    font-size: 40px;\n    font-weight: bold;\n  }\n\n  .loading {\n    margin-top: 10vh;\n    margin-left: 42vw;\n  }\n`;\n\nconst Detail = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n\n  .title {\n    font-weight: bold;\n    font-size: 30px;\n    margin: 0.5em 0;\n    align-self: center;\n\n    .github {\n      vertical-align: middle;\n      margin-left: 10px;\n\n      a {\n        color: ${FONT_COLOR};\n\n        :hover {\n          color: ${SECONDARY_COLOR};\n        }\n      }\n    }\n  }\n\n  .image {\n    display: flex;\n    justify-content: center;\n\n    img {\n      height: 200px;\n      margin: 0 1em;\n\n      @media screen and (max-width: 900px) {\n        height: 100px;\n      }\n    }\n  }\n\n  .descriptions {\n    display: flex;\n    flex-direction: column;\n    text-align: justify;\n\n    .tech-stack {\n      font-weight: bold;\n      font-size: 1em;\n    }\n\n    @media screen and (max-width: 900px) {\n      padding-left: 10px;\n    }\n\n    @media screen and (min-width: 900px) {\n      align-items: center;\n\n      li {\n        width: 75%;\n        margin: 3px;\n      }\n    }\n  }\n`;\n",
    "import { Dispatch } from \"redux\";\n\nimport { ProjectActionTypes } from \"../actions/types\";\nimport ProjectModel from \"../../models/Project\";\nimport * as api from \"../../api\";\n\n// Models ------------------------------------------------------------\nexport interface LoadingProjects {\n  type: ProjectActionTypes.LOADING_PROJECTS;\n}\n\nexport interface SetProjects {\n  type: ProjectActionTypes.SET_PROJECTS;\n  payload: ProjectModel[];\n}\n\n// Actions ------------------------------------------------------------\nexport const loadingProjects = (): LoadingProjects => ({\n  type: ProjectActionTypes.LOADING_PROJECTS,\n});\n\nexport const setProjects = (payload: ProjectModel[]): SetProjects => ({\n  type: ProjectActionTypes.SET_PROJECTS,\n  payload: payload,\n});\n\nexport const fetchProjects = () => async (dispatch: Dispatch) => {\n  dispatch<LoadingProjects>(loadingProjects());\n  const projects: ProjectModel[] = await api.getProjects();\n  dispatch<SetProjects>(setProjects(projects));\n};\n",
    "import React from \"react\";\nimport { Element } from \"react-scroll\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport LoadingIndicator from \"../components/LoadingIndicator\";\nimport AchievementModel from \"../models/Achievement\";\nimport Description from \"../models/Description\";\n\nimport { ACHIEVEMENT_ROUTE } from \"../constants/routes\";\nimport { PRIMARY_COLOR, FONT_COLOR } from \"../constants/style\";\nimport { fetchAchievements } from \"../redux/actions/Achievement\";\nimport { StoreState } from \"../redux/reducers\";\nimport { AchievementActionModel } from \"../redux/reducers/Achievement\";\n\ninterface AchievementProps {\n  achievements: AchievementActionModel;\n  fetchAchievements: Function;\n}\n\nclass Achievement extends React.Component<AchievementProps> {\n  componentDidMount(): void {\n    if (!this.props.achievements.loaded) {\n      this.props.fetchAchievements();\n    }\n  }\n\n  render() {\n    const {\n      achievements,\n      loading,\n    }: {\n      achievements: AchievementModel[];\n      loading: boolean;\n    } = this.props.achievements;\n\n    return (\n      <StyledElement name={ACHIEVEMENT_ROUTE}>\n        <Container>\n          <div className=\"header\">Achievements</div>\n          {loading && (\n            <div className=\"loading\">\n              <LoadingIndicator />\n            </div>\n          )}\n          {!loading && (\n            <div>\n              {Object.values(achievements).map(\n                (achievement: AchievementModel) => (\n                  <div key={achievement.id} className=\"achievement\">\n                    <div className=\"image\">\n                      <img src={achievement.imageUrl} alt={achievement.time} />\n                    </div>\n                    <div className=\"detail\">\n                      <div className=\"title-and-time\">\n                        <span className=\"title\">{achievement.title}</span>\n                        <span className=\"desktop-time\">{achievement.time}</span>\n                      </div>\n                      <div className=\"organizer\">{achievement.organizer}</div>\n                      <div className=\"mobile-time\">{achievement.time}</div>\n                      <ul className=\"descriptions\">\n                        {Object.values(achievement.descriptions).map(\n                          (description: Description) => (\n                            <li key={description} className=\"description\">\n                              {description}\n                            </li>\n                          )\n                        )}\n                      </ul>\n                    </div>\n                  </div>\n                )\n              )}\n            </div>\n          )}\n        </Container>\n      </StyledElement>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  achievements,\n}: StoreState): { achievements: AchievementActionModel } => {\n  return { achievements };\n};\n\nexport default connect(mapStateToProps, { fetchAchievements })(Achievement);\n\nconst StyledElement = styled(Element)`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: auto;\n  background-color: ${PRIMARY_COLOR};\n  color: ${FONT_COLOR};\n`;\n\nconst Container = styled.div`\n  width: 85%;\n  display: flex;\n  flex-direction: column;\n\n  .header {\n    margin: 30px 0;\n    font-size: 40px;\n    font-weight: bold;\n  }\n\n  .loading {\n    margin-top: 10vh;\n    margin-left: 42vw;\n  }\n\n  .achievement {\n    display: flex;\n    flex-direction: row;\n\n    .detail {\n      width: 100%;\n      flex-direction: column;\n      margin-bottom: 20px;\n      text-align: justify;\n    }\n\n    .organizer {\n      margin-top: 5px;\n      font-weight: bold;\n\n      @media screen and (max-width: 900px) {\n        text-align: center;\n      }\n    }\n\n    .mobile-time {\n      display: none;\n      margin-bottom: 10px;\n    }\n\n    @media screen and (max-width: 900px) {\n      flex-direction: column;\n\n      .descriptions {\n        padding-left: 10px;\n      }\n\n      .description {\n        margin: 5px 0;\n      }\n\n      .mobile-time {\n        display: flex;\n        margin-top: 5px;\n        justify-content: center;\n      }\n    }\n  }\n\n  .image {\n    margin: 0 20px 0 20px;\n    img {\n      width: 150px;\n    }\n\n    @media screen and (max-width: 900px) {\n      margin: auto;\n      margin-bottom: 20px;\n    }\n  }\n\n  .title-and-time {\n    display: flex;\n    width: 100%;\n    flex-direction: row;\n    justify-content: space-between;\n\n    .title {\n      font-weight: bold;\n      font-size: 1.5em;\n      text-align: center;\n    }\n\n    @media screen and (max-width: 900px) {\n      justify-content: center;\n      .desktop-time {\n        display: none;\n      }\n    }\n  }\n`;\n",
    "import { Dispatch } from \"redux\";\n\nimport AchievementModel from \"../../models/Achievement\";\n\nimport { AchievementActionTypes } from \"../actions/types\";\nimport * as api from \"../../api\";\n\n// Models ------------------------------------------------------------\nexport interface LoadingAchievements {\n  type: AchievementActionTypes.LOADING_ACHIEVEMENTS;\n}\n\nexport interface SetAchievements {\n  type: AchievementActionTypes.SET_ACHIEVEMENTS;\n  payload: AchievementModel[];\n}\n\n// Actions ------------------------------------------------------------\nexport const loadingAchievements = (): LoadingAchievements => ({\n  type: AchievementActionTypes.LOADING_ACHIEVEMENTS,\n});\n\nexport const setAchievements = (\n  payload: AchievementModel[]\n): SetAchievements => ({\n  type: AchievementActionTypes.SET_ACHIEVEMENTS,\n  payload: payload,\n});\n\nexport const fetchAchievements = () => async (dispatch: Dispatch) => {\n  dispatch<LoadingAchievements>(loadingAchievements());\n  const achievements: AchievementModel[] = await api.getAchievements();\n  dispatch<SetAchievements>(setAchievements(achievements));\n};\n",
    "import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Element } from \"react-scroll\";\nimport styled from \"styled-components\";\n\nimport LoadingIndicator from \"../components/LoadingIndicator\";\nimport SkillModel from \"../models/Skill\";\n\nimport { SKILL_ROUTE } from \"../constants/routes\";\nimport { PRIMARY_COLOR, FONT_COLOR, SECONDARY_COLOR } from \"../constants/style\";\nimport { fetchSkills } from \"../redux/actions/Skill\";\nimport { StoreState } from \"../redux/reducers\";\nimport { SkillActionModel } from \"../redux/reducers/Skill\";\n\ninterface SkillProps {\n  skills: SkillActionModel;\n  fetchSkills: Function;\n}\n\ninterface SkillState {\n  collapsed: boolean;\n}\n\nclass Skill extends React.Component<SkillProps, SkillState> {\n  constructor(props: SkillProps) {\n    super(props);\n    this.state = { collapsed: true };\n  }\n\n  componentDidMount() {\n    if (!this.props.skills.loaded) {\n      this.props.fetchSkills();\n    }\n\n    setTimeout(() => {\n      this.setState({ collapsed: false });\n    }, 1000);\n  }\n\n  render() {\n    const { collapsed }: { collapsed: boolean } = this.state;\n    const {\n      skills,\n      loading,\n    }: { skills: SkillModel[]; loading: boolean } = this.props.skills;\n\n    return (\n      <StyledElement name={SKILL_ROUTE}>\n        <Container className={`container ${collapsed ? \"collapsed\" : \"\"} `}>\n          <div className=\"header\">Skills</div>\n          {loading && (\n            <div className=\"loading\">\n              <LoadingIndicator />\n            </div>\n          )}\n          {!loading && (\n            <Skills>\n              {Object.values(skills).map((skill: SkillModel) => (\n                <li key={skill.name} style={{ width: `${skill.level}%` }}>\n                  <p>{skill.name}</p>\n                  <span>{skill.level}</span>\n                </li>\n              ))}\n            </Skills>\n          )}\n        </Container>\n      </StyledElement>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  skills,\n}: StoreState): { skills: SkillActionModel } => {\n  return { skills };\n};\n\nexport default connect(mapStateToProps, { fetchSkills })(Skill);\n\nconst StyledElement = styled(Element)`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: ${PRIMARY_COLOR};\n  color: ${FONT_COLOR};\n`;\n\nconst Container = styled.div`\n  width: 85%;\n\n  .header {\n    margin: 30px 0;\n    width: 85%;\n    font-size: 40px;\n    font-weight: bold;\n  }\n\n  .loading {\n    margin-top: 10vh;\n    margin-left: 42vw;\n  }\n`;\n\nconst Skills = styled.ul`\n  margin: 0 30px 5vh 30px;\n  padding: 0;\n\n  li {\n    display: block;\n    position: relative;\n    background-color: #888;\n    color: #fff;\n    margin: 10px 0;\n    transition: width 300ms ease-in-out;\n\n    background-color: ${SECONDARY_COLOR};\n\n    .collapsed & {\n      width: 0 !important;\n    }\n\n    p {\n      padding: 10px;\n      margin: 0;\n      font-weight: bold;\n    }\n    span {\n      position: absolute;\n      right: 10px;\n      display: inline-block;\n      width: 30px;\n      top: 11px;\n      text-align: right;\n      font-weight: normal;\n      color: #fff;\n      font-size: 11px;\n    }\n  }\n`;\n",
    "import { Dispatch } from \"redux\";\n\nimport SkillModel from \"../../models/Skill\";\n\nimport { SkillActionTypes } from \"../actions/types\";\nimport * as api from \"../../api\";\n\n// Models ------------------------------------------------------------\nexport interface LoadingSkills {\n  type: SkillActionTypes.LOADING_SKILLS;\n}\n\nexport interface SetSkills {\n  type: SkillActionTypes.SET_SKILLS;\n  payload: SkillModel[];\n}\n\n// Actions ------------------------------------------------------------\nexport const loadingSkills = (): LoadingSkills => ({\n  type: SkillActionTypes.LOADING_SKILLS,\n});\n\nexport const setSkills = (payload: SkillModel[]): SetSkills => ({\n  type: SkillActionTypes.SET_SKILLS,\n  payload: payload,\n});\n\nexport const fetchSkills = () => async (dispatch: Dispatch) => {\n  dispatch<LoadingSkills>(loadingSkills());\n  const skills: SkillModel[] = await api.getSkills();\n  dispatch<SetSkills>(setSkills(skills));\n};\n",
    "import * as routes from \"./routes\";\n\nexport interface PageDetails {\n  to: string;\n  text: string;\n}\n\ninterface PageLinks {\n  Home: PageDetails;\n  Profile: PageDetails;\n  Experience: PageDetails;\n  Project: PageDetails;\n  Achievement: PageDetails;\n  Skill: PageDetails;\n}\n\nexport const links: PageLinks = {\n  Home: {\n    to: routes.HOME_ROUTE,\n    text: \"Home\",\n  },\n  Profile: {\n    to: routes.PROFILE_ROUTE,\n    text: \"Profile\",\n  },\n  Experience: {\n    to: routes.EXPERIENCE_ROUTE,\n    text: \"Experiences\",\n  },\n  Project: {\n    to: routes.PROJECT_ROUTE,\n    text: \"Projects\",\n  },\n  Achievement: {\n    to: routes.ACHIEVEMENT_ROUTE,\n    text: \"Achievements\",\n  },\n  Skill: {\n    to: routes.SKILL_ROUTE,\n    text: \"Skills\",\n  },\n};\n",
    "import React from \"react\";\nimport { Link } from \"react-scroll\";\nimport styled from \"styled-components\";\n\nimport { links, PageDetails } from \"../constants/scrollLinks\";\nimport { SECONDARY_COLOR } from \"../constants/style\";\n\ninterface NavbarProps {}\n\ninterface NavbarState {\n  show: boolean;\n  scrollPos: number;\n}\n\nclass NavigationBar extends React.Component<NavbarProps, NavbarState> {\n  constructor(props: NavbarProps) {\n    super(props);\n    this.state = {\n      show: true,\n      scrollPos: 0,\n    };\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  handleScroll() {\n    const { scrollPos } = this.state;\n    this.setState({\n      scrollPos: document.body.getBoundingClientRect().top,\n      show: document.body.getBoundingClientRect().top > scrollPos,\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  render() {\n    return (\n      <Transition>\n        <StyledNavbar className={this.state.show ? \"active\" : \"hidden\"}>\n          <Links>\n            {Object.values(links).map((link: PageDetails) => (\n              <Link\n                className=\"link\"\n                key={link.to}\n                to={link.to}\n                spy\n                smooth\n                duration={500}\n              >\n                {link.text}\n              </Link>\n            ))}\n          </Links>\n        </StyledNavbar>\n      </Transition>\n    );\n  }\n}\n\nexport default NavigationBar;\n\nconst Transition = styled.div`\n  @media screen and (max-width: 900px) {\n    display: none;\n  }\n\n  .active {\n    visibility: visible;\n    transition: all 500ms ease-out;\n  }\n  .hidden {\n    visibility: hidden;\n    transition: all 500ms ease-in;\n    transform: translate(0, -100%);\n  }\n`;\n\nconst StyledNavbar = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  margin: 0 auto;\n  height: 70px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: bolder;\n  background-color: rgb(55, 56, 59, 0.5);\n  z-index: 1000;\n`;\n\nconst Links = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  color: white;\n\n  .link {\n    margin: 0 10px;\n    transform: translateX(-30px);\n    -webkit-transform: translateX(-30px);\n  }\n\n  .link:hover {\n    cursor: pointer;\n    color: ${SECONDARY_COLOR};\n  }\n`;\n",
    "import React from \"react\";\nimport { Link } from \"react-scroll\";\nimport styled from \"styled-components\";\n\nimport { links, PageDetails } from \"../constants/scrollLinks\";\nimport { FONT_COLOR } from \"../constants/style\";\n\ninterface MobileNavbarState {\n  open: boolean;\n}\n\ninterface MobileNavbarProps {}\n\nclass MobileNavbar extends React.Component<\n  MobileNavbarProps,\n  MobileNavbarState\n> {\n  constructor(props: MobileNavbarProps) {\n    super(props);\n    this.state = { open: false };\n  }\n\n  toggleHamburger(): void {\n    this.setState({ open: !this.state.open });\n  }\n\n  render() {\n    return (\n      <Container>\n        <StyledNavbar\n          open={this.state.open}\n          onClick={() => this.toggleHamburger()}\n        >\n          <div />\n          <div />\n          <div />\n        </StyledNavbar>\n        <Links open={this.state.open}>\n          {Object.values(links).map((link: PageDetails) => (\n            <Link\n              className=\"link\"\n              key={link.to}\n              to={link.to}\n              spy\n              smooth\n              duration={500}\n              onClick={() => this.toggleHamburger()}\n            >\n              {link.text}\n            </Link>\n          ))}\n        </Links>\n      </Container>\n    );\n  }\n}\n\nexport default MobileNavbar;\n\nconst Container = styled.div`\n  height: 70px;\n  width: 100%;\n  background-color: rgb(55, 56, 59, 0.5);\n  position: fixed;\n  z-index: 1000;\n\n  @media screen and (min-width: 901px) {\n    display: none;\n  }\n`;\n\nconst StyledNavbar: any = styled.div`\n  width: 2rem;\n  height: 2rem;\n  position: fixed;\n  top: 15px;\n  right: 20px;\n  z-index: 20;\n  display: none;\n\n  @media (max-width: 900px) {\n    display: flex;\n    justify-content: space-around;\n    flex-flow: column nowrap;\n  }\n\n  div {\n    width: 2rem;\n    height: 0.25rem;\n    background-color: ${FONT_COLOR};\n    border-radius: 10px;\n    transform-origin: 1px;\n    transition: all 0.3s linear;\n\n    &:nth-child(1) {\n      transform: ${({ open }: { open: boolean }) =>\n        open ? \"rotate(45deg)\" : \"rotate(0)\"};\n    }\n\n    &:nth-child(2) {\n      transform: ${({ open }: { open: boolean }) =>\n        open ? \"translateX(100%)\" : \"translateX(0)\"};\n      opacity: ${({ open }: { open: boolean }) => (open ? 0 : 1)};\n    }\n\n    &:nth-child(3) {\n      transform: ${({ open }: { open: boolean }) =>\n        open ? \"rotate(-45deg)\" : \"rotate(0)\"};\n    }\n  }\n`;\n\nconst Links: any = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-flow: row nowrap;\n  margin-block-start: 0;\n\n  @media (max-width: 900px) {\n    flex-flow: column nowrap;\n    background-color: #0d2538;\n    position: fixed;\n    transform: ${({ open }: { open: boolean }) =>\n      open ? \"translateX(0)\" : \"translateX(100%)\"};\n    top: 0;\n    right: 0;\n    height: 100vh;\n    width: 200px;\n    padding-top: 4.5rem;\n    transition: transform 0.3s ease-in-out;\n\n    .link {\n      color: ${FONT_COLOR};\n      padding: 18px 30px;\n      text-align: right;\n      font-weight: bold;\n      font-size: 20px;\n    }\n  }\n`;\n",
    "import React from \"react\";\nimport styled from \"styled-components\";\nimport Home from \"./Home\";\nimport Profile from \"./Profile\";\nimport Experience from \"./Experience\";\nimport Project from \"./Project\";\nimport Achievement from \"./Achievement\";\nimport Skill from \"./Skill\";\nimport NavigationBar from \"../components/Navbar\";\nimport MobileNavbar from \"../components/MobileNavbar\";\n\nclass Routes extends React.Component {\n  render() {\n    return (\n      <Container>\n        <NavigationBar />\n        <MobileNavbar />\n        <Home />\n        <Profile />\n        <Experience />\n        <Project />\n        <Achievement />\n        <Skill />\n      </Container>\n    );\n  }\n}\n\nexport default Routes;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  overflow: hidden;\n  font-family: \"Expletus Sans\";\n`;\n",
    "import ExperienceModel from \"../../models/Experience\";\nimport { ExperienceAction, ExperienceActionTypes } from \"../actions/types\";\n\nexport interface ExperienceActionModel extends ExperienceModel {\n  loading: boolean;\n  loaded: boolean;\n}\n\nconst INITIAL_STATE: ExperienceActionModel = {\n  educations: [],\n  works: [],\n  loading: false,\n  loaded: false,\n};\n\nexport const experienceReducer = (\n  state: ExperienceActionModel = INITIAL_STATE,\n  action: ExperienceAction\n): ExperienceActionModel => {\n  switch (action.type) {\n    case ExperienceActionTypes.SET_EXPERIENCES:\n      return { ...state, ...action.payload, loading: false, loaded: true };\n    case ExperienceActionTypes.LOADING_EXPERIENCES:\n      return { ...state, loading: true };\n    default:\n      return state;\n  }\n};\n",
    "import ProjectModel from \"../../models/Project\";\nimport { ProjectAction, ProjectActionTypes } from \"../actions/types\";\n\nexport interface ProjectActionModel {\n  projects: ProjectModel[];\n  loading: boolean;\n  loaded: boolean;\n}\n\nconst INITIAL_STATE: ProjectActionModel = {\n  projects: [],\n  loading: false,\n  loaded: false,\n};\n\nexport const projectReducer = (\n  state: ProjectActionModel = INITIAL_STATE,\n  action: ProjectAction\n): ProjectActionModel => {\n  switch (action.type) {\n    case ProjectActionTypes.SET_PROJECTS:\n      return {\n        ...state,\n        projects: action.payload,\n        loading: false,\n        loaded: true,\n      };\n    case ProjectActionTypes.LOADING_PROJECTS:\n      return { ...state, loading: true };\n    default:\n      return state;\n  }\n};\n",
    "import AchievementModel from \"../../models/Achievement\";\nimport { AchievementAction, AchievementActionTypes } from \"../actions/types\";\n\nexport interface AchievementActionModel {\n  achievements: AchievementModel[];\n  loading: boolean;\n  loaded: boolean;\n}\n\nconst INITIAL_STATE: AchievementActionModel = {\n  achievements: [],\n  loading: false,\n  loaded: false,\n};\n\nexport const achievementReducer = (\n  state: AchievementActionModel = INITIAL_STATE,\n  action: AchievementAction\n): AchievementActionModel => {\n  switch (action.type) {\n    case AchievementActionTypes.SET_ACHIEVEMENTS:\n      return {\n        ...state,\n        achievements: action.payload,\n        loading: false,\n        loaded: true,\n      };\n    case AchievementActionTypes.LOADING_ACHIEVEMENTS:\n      return { ...state, loading: true };\n    default:\n      return state;\n  }\n};\n",
    "import SkillModel from \"../../models/Skill\";\nimport { SkillActionTypes, SkillAction } from \"../actions/types\";\n\nexport interface SkillActionModel {\n  skills: SkillModel[];\n  loading: boolean;\n  loaded: boolean;\n}\n\nconst INITIAL_STATE: SkillActionModel = {\n  skills: [],\n  loading: false,\n  loaded: false,\n};\n\nexport const skillReducer = (\n  state: SkillActionModel = INITIAL_STATE,\n  action: SkillAction\n) => {\n  switch (action.type) {\n    case SkillActionTypes.SET_SKILLS:\n      return {\n        ...state,\n        skills: action.payload,\n        loading: false,\n        loaded: true,\n      };\n    case SkillActionTypes.LOADING_SKILLS:\n      return { ...state, loading: true };\n    default:\n      return state;\n  }\n};\n",
    "import ProfileModel from \"../../models/Profile\";\nimport { ProfileAction, ProfileActionTypes } from \"../actions/types\";\n\nexport interface ProfileActionModel {\n  profile: ProfileModel;\n  loading: boolean;\n  loaded: boolean;\n}\n\nconst INITIAL_STATE: ProfileActionModel = {\n  profile: {\n    name: \"\",\n    message: \"\",\n    email: \"\",\n    imageUrl: \"\",\n    descriptions: [],\n  },\n  loading: false,\n  loaded: false,\n};\n\nexport const profileReducer = (\n  state: ProfileActionModel = INITIAL_STATE,\n  action: ProfileAction\n): ProfileActionModel => {\n  switch (action.type) {\n    case ProfileActionTypes.SET_PROFILE:\n      return {\n        ...state,\n        profile: action.payload,\n        loading: false,\n        loaded: true,\n      };\n    case ProfileActionTypes.LOADING_PROFILE:\n      return { ...state, loading: true };\n    case ProfileActionTypes.GET_PROFILE:\n      return { ...state, profile: state.profile };\n    default:\n      return state;\n  }\n};\n",
    "import { combineReducers } from \"redux\";\nimport { experienceReducer, ExperienceActionModel } from \"./Experience\";\nimport { ProjectActionModel, projectReducer } from \"./Project\";\nimport { AchievementActionModel, achievementReducer } from \"./Achievement\";\nimport { SkillActionModel, skillReducer } from \"./Skill\";\nimport { ProfileActionModel, profileReducer } from \"./Profile\";\n\nexport interface StoreState {\n  profile: ProfileActionModel;\n  experiences: ExperienceActionModel;\n  projects: ProjectActionModel;\n  achievements: AchievementActionModel;\n  skills: SkillActionModel;\n}\n\nexport const reducers = combineReducers<StoreState>({\n  profile: profileReducer,\n  experiences: experienceReducer,\n  projects: projectReducer,\n  achievements: achievementReducer,\n  skills: skillReducer,\n});\n",
    "import { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { reducers } from \"./reducers\";\n\nconst isOnProduction: boolean = process.env.NODE_ENV === \"production\";\n\nlet store: any;\nif (isOnProduction) {\n  store = createStore(reducers, applyMiddleware(thunk));\n} else {\n  store = createStore(reducers, applyMiddleware(thunk, logger));\n}\n\nexport default store;\n",
    "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./containers\";\nimport store from \"./redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.querySelector(\"#root\")\n);\n"
  ],
  "sourceRoot": ""
}
